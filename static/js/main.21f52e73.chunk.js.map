{"version":3,"sources":["stores/TodoModel.js","stores/TodoStore.js","components/TodoEntry.js","components/TodoItem.js","components/TodoItems.js","App.js","serviceWorker.js","index.js"],"names":["TodoModel","store","title","id","completed","this","observable","action","lastId","todos","push","TodoEntry","state","value","handleClick","event","keyCode","preventDefault","TodoStore","addTodo","setState","className","onChange","target","onKeyDown","type","placeholder","Component","TodoItem","observer","handleToggle","props","todo","toggle","checked","TodoItems","map","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4TAGqBA,G,aAOjB,WAAYC,EAAMC,EAAMC,EAAGC,GAAW,2HACrCC,KAAKJ,MAAOA,EACZI,KAAKH,MAAMA,EACXG,KAAKD,UAAUA,EACfC,KAAKF,GAAGA,E,qDAQPE,KAAKD,WAAWC,KAAKD,c,wCAjBvBE,K,iGACAA,K,qGACAA,K,gGAaDC,K,sECPYN,EADD,I,oFANdO,OAAO,E,oDAECN,GACJG,KAAKI,MAAMC,KAAK,IAAIV,EAAUK,KAAKH,GAAM,EAAMG,KAAKG,e,wCAJvDF,K,wEAAiB,M,mCAEjBC,K,uECJoBI,E,4MACjBC,MAAM,CACLC,MAAM,I,EAEXC,YAAa,SAAAC,GACU,KAAhBA,EAAMC,UAGTD,EAAME,iBACNC,EAAUC,QAAQ,EAAKP,MAAMC,OAC7B,EAAKO,SAAS,CACVP,MAAM,O,uDAGD,IAAD,OACJ,OACI,4BAAQQ,UAAU,UAClB,oCACA,2BACAR,MAAOR,KAAKO,MAAMC,MAClBS,SAAU,SAAAP,GAAK,OAAI,EAAKK,SAAS,CAACP,MAAME,EAAMQ,OAAOV,SACrDW,UACI,SAAAT,GAAK,OAAG,EAAKD,YAAYC,IAE7BU,KAAK,OACLJ,UAAU,WACVK,YAAY,yB,GA1BeC,aC0BxBC,EA1BdC,Y,8MAEGC,aAAa,WAEb,EAAKC,MAAMC,KAAKC,U,uDAEP,IACED,EAAQ3B,KAAK0B,MAAbC,KACP,OACI,wBAAIX,UAAWW,EAAK5B,UAAY,YAAc,IAC9C,yBAAKiB,UAAU,QACb,2BACAC,SAAUjB,KAAKyB,eACfL,KAAK,WACLJ,UAAU,SACVR,MAAM,KACNqB,QAASF,EAAK5B,YAEf,+BAAQ4B,EAAK9B,OACb,4BAAQmB,UAAU,iB,GAlBPM,e,ECoBRQ,EApBfN,Y,yKAIO,OACI,6BAASR,UAAU,QACnB,wBAAIA,UAAU,aAEfH,EAAUT,MAAM2B,KAAI,SAACJ,GACjB,OACI,kBAAC,EAAD,CAAUA,KAAMA,a,GATXL,e,ECiBTU,EAjBdR,Y,yKAGC,OACE,yBAAK1B,GAAG,UAAUkB,UAAU,WAC3B,kBAAC,EAAD,MACD,kBAAC,EAAD,W,GALcM,e,ECMEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.21f52e73.chunk.js","sourcesContent":["import { observable, action } from 'mobx'\r\n\r\n\r\nexport default class TodoModel {\r\n   \r\n   @observable store\r\n   @observable title\r\n   @observable completed\r\n   id\r\n\r\n    constructor(store,title,id,completed){\r\n     this.store =store\r\n     this.title=title\r\n     this.completed=completed\r\n     this.id=id\r\n   \r\n\r\n    }\r\n \r\n  \r\n  @action\r\n  toggle(){\r\n      this.completed=!this.completed\r\n  }\r\n\r\n}\r\n","import { observable, action } from 'mobx'\r\nimport TodoModel from './TodoModel'\r\n\r\n\r\n class TodoStore {\r\n@observable todos=[]\r\nlastId=0\r\n@action\r\naddTodo(title){\r\n    this.todos.push(new TodoModel(this,title,false,this.lastId++))\r\n}\r\n}\r\nconst store = new TodoStore()\r\nexport default store","import React , {Component} from 'react'\r\nimport TodoStore from '../stores/TodoStore'\r\n\r\nexport default class TodoEntry extends Component {\r\n    state={\r\n     value:''\r\n    }\r\nhandleClick= event=>{\r\n    if(event.keyCode!==13){\r\n        return;\r\n    }\r\n    event.preventDefault()\r\n    TodoStore.addTodo(this.state.value)\r\n    this.setState({\r\n        value:''\r\n    })\r\n}\r\n    render(){\r\n        return(\r\n            <header className=\"header\">\r\n            <h1>todo</h1>\r\n            <input\r\n            value={this.state.value}\r\n            onChange={event => this.setState({value:event.target.value})}\r\n            onKeyDown={\r\n                event=> this.handleClick(event)\r\n            }\r\n            type=\"text\"\r\n            className=\"new-todo\"\r\n            placeholder=\"what do u need?\" />\r\n            </header>\r\n        )\r\n    }\r\n\r\n}","import React , {Component} from 'react'\r\nimport {observer} from 'mobx-react'\r\n\r\n@observer\r\n class TodoItem extends Component {\r\n    handleToggle=()=>\r\n    {\r\n    this.props.todo.toggle()\r\n    }\r\n    render(){\r\n        const {todo} = this.props\r\n        return(\r\n            <li className={todo.completed ? 'completed' : ''}>\r\n            <div className=\"view\">\r\n              <input\r\n              onChange={this.handleToggle()}\r\n              type=\"checkbox\"\r\n              className=\"toggle\"\r\n              value=\"on\"\r\n              checked={todo.completed}\r\n              />\r\n             <label>{todo.title}</label>\r\n             <button className=\"destry\" />\r\n            </div>\r\n            </li>\r\n        )\r\n    }\r\n\r\n}\r\nexport default TodoItem;","import React , {Component} from 'react'\r\nimport TodoItem from './TodoItem'\r\nimport {observer} from 'mobx-react'\r\nimport TodoStore from '../stores/TodoStore'\r\n@observer\r\nclass TodoItems extends Component {\r\n   \r\n    render(){\r\n        return(\r\n            <section className=\"main\">\r\n            <ul className=\"todo-list\">\r\n           {\r\n           TodoStore.todos.map((todo)=>{\r\n               return(\r\n                   <TodoItem todo={todo} />\r\n               )\r\n           })\r\n           }\r\n            </ul>\r\n            </section>\r\n        )\r\n    }\r\n\r\n}\r\nexport default  TodoItems","import React, {Component} from 'react';\nimport './App.css';\nimport {observer} from 'mobx-react'\nimport TodoEntry from './components/TodoEntry'\nimport TodoItems from './components/TodoItems'\n@observer\nclass App extends Component {\n  render(){\n  return (\n    <div id=\"todoapp\" className=\"todoapp\">\n     <TodoEntry/>\n    <TodoItems />\n\n\n    </div>\n    \n\n    \n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}